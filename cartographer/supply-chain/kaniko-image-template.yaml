---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: kaniko-build-pipeline
spec:
  outputs:
    imageRef: status.pipelineResults[0].value
  template:
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: $(runnable.metadata.name)$-
    spec:
      params: $(runnable.spec.inputs.params)$
      pipelineRef:
        name: kaniko-git-pipeline
      podTemplate:
        securityContext:
          fsGroup: 3000
      workspaces:
        - name: source-ws
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
        - name: docker-credentials
          emptyDir: {}
        # - name: git-credentials
        #   emptyDir: {}
        # - name: docker-credentials
        #   secret:
        #     secretName: registry-credentials
        #     items:
        #       - key: .dockerconfigjson
        #         path: config.json
        - name: git-credentials
          secret:
            secretName: git-clone-auth
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kaniko-image
  namespace: cartographer-build
spec:
  params:
    - name: image_prefix
      default: some-default-prefix-

  imagePath: .status.outputs.imageRef
  ytt: |
    #@ load("@ytt:data", "data")
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-kaniko-image"
    spec:
      inputs:
        params:
        - name: source-revision
          value: #@ data.values.source.revision
        - name: artifact-url
          value: #@ data.values.source.url
        - name: repo-url
          value: #@ data.values.workload.spec.source.git.url
        - name: image-reference
          value: #@ "".join([data.values.params.image_prefix,data.values.workload.metadata.name])
      runTemplateRef:
        name: kaniko-build-pipeline
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

# Similar to this solution: https://github.com/vrabbi/tap-oss/blob/main/packages/ootb-supply-chains/config/kaniko-based-sc-additions.yaml

  # template:
  #   apiVersion: tekton.dev/v1beta1
  #   kind: PipelineRun
  #   metadata:
  #     generateName: kaniko-pipeline-run-
  #   spec:
  #     pipelineRef:
  #       name: kaniko-pipeline
  #     podTemplate:
  #       securityContext:
  #         fsGroup: 65532
  #     workspaces:
  #       - name: shared-data
  #         emptyDir: {}
  #         # volumeClaimTemplate:
  #         #   spec:
  #         #     accessModes:
  #         #       - ReadWriteOnce
  #         #     resources:
  #         #       requests:
  #         #         storage: 1Gi
  #       - name: docker-credentials
  #         secret:
  #           secretName: docker-credentials
  #     params:
  #       - name: artifact-url
  #         value: $(sources.source.url)$
  #       - name: image-reference
  #         value: $(params.image_prefix)$$(workload.metadata.name)$

    # apiVersion: tekton.dev/v1beta1
    # kind: TaskRun
    # metadata:
    #   generateName: test-
    # spec:
    #   taskRef:
    #     name: test
    #   params:
    #     - name: DOCKERFILE
    #       value: $(workload.spec.params.dockerfile)$
    #     - name: blob-url
    #       value: $(runnable.spec.inputs.blob-url)$
    #     - name: blob-revision
    #       value: $(runnable.spec.inputs.blob-revision)$

    # apiVersion: kpack.io/v1alpha2
    # kind: Image
    # metadata:
    #   name: $(workload.metadata.name)$
    # spec:
    #   tag: $(params.image_prefix)$$(workload.metadata.name)$
    #   serviceAccountName: cartographer-example-registry-creds-sa
    #   builder:
    #     kind: ClusterBuilder
    #     name: go-builder
    #   source:
    #     blob:
    #       url: $(sources.source.url)$
    #   build:
    #     env: $(workload.spec.build.env)$
